#!/usr/bin/perl

use strict;
use warnings;

my $errOpen;
$errOpen = sub {
  my $files = shift;
  my $filesHash = shift;
  my $errno = shift;

  my $msg = "";
  my $first = 1;
  foreach (@$files) {
    if ($first) {
      $msg .= "File (line $filesHash->{$_}): $_";
      $first = 0;
    }
    else {
      $msg .= "$/Included file (line $filesHash->{$_}): $_";
    }
  }
  $msg .= "$/Cannot open " . $files->[-1] . " for input: $errno";
  die $msg;
};

my $errInfRec;
$errInfRec = sub {
  my $files = shift;
  my $filesHash = shift;
  my $lastFile = shift;

  my $msg = "";
  my $first = 1;
  foreach (@$files) {
    if ($first) {
      $msg .= "File (line $filesHash->{$_}): $_";
      $first = 0;
    }
    else {
      $msg .= "$/Included file (line $filesHash->{$_}): $_";
    }
  }
  $msg .= "$/Included file: $lastFile";
  $msg .= "$/Infinite loop detected!";
  die $msg;
};

my $fn;
$fn = sub {
  my $sFile = shift;
  my $files = shift;
  my $filesHash = shift;
  my $pFile;
  my $br;
  my $line = 0;

  $files = [] unless defined $files;
  $filesHash = {} unless defined $filesHash;

  push @$files, $sFile;
  $filesHash->{$sFile} = 0;

  open($pFile, "<", $sFile)
    or $errOpen->($files, $filesHash, $!);

  while (<$pFile>) {
    $br = chomp;
    $line++;
    if (/<!--#static-include\s+file="[^"]*"\s+-->/) {
      my $str = $_;
      my $pos = tell $pFile;
      $filesHash->{$sFile} = $line;
      close $pFile;

      while (1) {
        if ($str =~ /(.*?)<!--#static-include\s+file="([^"]*)"\s+-->(.*)/) {
          print $1;
          # Detect recursion.
          if (exists $filesHash->{$2}) {
            $errInfRec->($files, $filesHash, $2);
          }
          # Call recursively on the included file.
          $fn->($2, $files, $filesHash);
          $str = $3;
        }
        else {
          print $str;
          last;
        }
      }

      open($pFile, "<", $sFile)
        or $errOpen->($files, $filesHash, $!);
      seek $pFile, $pos, 0;
    }
    else {
      print;
    }
    print $/ if $br;
  }

  close $pFile;
  delete $filesHash->{$sFile};
  pop @$files;
};

$fn->(@ARGV);
