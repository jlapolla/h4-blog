#!/usr/bin/perl

use strict;
use warnings;
use HTML::TreeBuilder -weak;
use YAML::XS ();

my $sPageTemplate = shift;
my $sArticleContent = shift;
my $sArticleHead = shift;
my $sArticleConfig = shift;

# Load the template.
my $page = HTML::TreeBuilder->new;
$page->ignore_unknown(0);
$page->implicit_tags(0);
$page->store_comments(1);
$page->warn(1);
$page->parse_file($sPageTemplate)
  or die $!;

# Insert article header content into the template.
my $content = HTML::TreeBuilder->new;
$content->ignore_unknown(0);
$content->implicit_tags(0);
$content->store_comments(1);
$content->warn(1);
$content->parse_file($sArticleHead)
  or die $!;
my $wrapper = $page->find_by_tag_name('head');
foreach ($content->disembowel()) {
  $wrapper->push_content($_);
}

# Insert article content into the template.
$content = HTML::TreeBuilder->new;
$content->ignore_unknown(0);
$content->implicit_tags(0);
$content->store_comments(1);
$content->warn(1);
$content->parse_file($sArticleContent)
  or die $!;
$wrapper = $page->look_down('id', 'placeholder-article');
foreach ($content->disembowel()) {
  $wrapper->id(undef);
  $wrapper->push_content($_);
}

# Populate template based on article config information.
$content = YAML::XS::LoadFile($sArticleConfig)
  or die $!;

# Populate page title.
if (exists $content->{'title'}) {
  $page->find_by_tag_name('title')->delete_content()->push_content($content->{'title'} . ' - 4He');
}
else {
  $page->find_by_tag_name('title')->delete_content()->push_content('Untitled Article - 4He');
}

# Populate page contents.
sub populate_contents {
  my $dropdown = shift;
  my $template = shift;
  my $configArr = shift;
  my $depth = shift;

  $depth = 0 unless defined $depth;

  foreach my $config (@{$configArr}){
    my $item = $template->clone();
    if (exists $config->{'title'}){
      my $margin = 0;
      for (my $i = 0; $i < $depth; $i++){
        $margin += 8;
      }
      ($item->content_list())[0]->attr('style', 'margin-left: ' . $margin . 'px;');
      ($item->content_list())[0]->push_content($config->{'title'})
    }
    if (exists $config->{'href'}){
      ($item->content_list())[0]->attr('href', '#content-' . $config->{'href'});
    }
    $dropdown->push_content($item);
    if (exists $config->{'children'}){
      populate_contents($dropdown, $template, $config->{'children'}, $depth + 1);
    }
  }
}

if (exists $content->{'contents'}){
  my $dropdown = $page->look_down('id', 'placeholder-contents');
  $dropdown->id(undef);
  my $item = ($dropdown->detach_content())[0];
  ($item->content_list())[0]->delete_content();
  my $config = $content->{'contents'};
  populate_contents($dropdown, $item, $config);
}
else {
  # Remove content dropdown entirely.
  $page->look_down('id', 'placeholder-contents')->parent()->delete();
}

# Output HTML and DTD.
# Refer to http://www.perlmonks.org/?node_id=721332.
print $page->attr('_decl')->as_HTML(undef, undef, {}) . $/ if ($page->attr('_decl'));
foreach ($page->guts()) {
  if (ref) {
    print $_->as_HTML(undef, undef, {});
  }
  else {
    print;
  }
}
